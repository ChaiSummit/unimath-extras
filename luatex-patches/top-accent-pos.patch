Index: source/texk/web2c/luatexdir/tex/mlist.w
===================================================================
--- source/texk/web2c/luatexdir/tex/mlist.w	(revision 3964)
+++ source/texk/web2c/luatexdir/tex/mlist.w	(working copy)
@@ -2126,9 +2126,11 @@
 @c
 #define TOP_CODE 1
 #define BOT_CODE 2
+#define TOP_OR_BOT_MASK ((TOP_CODE) | (BOT_CODE))
+#define STRETCH_ACCENT_CODE 4
 
 static void do_make_math_accent(pointer q, internal_font_number f, int c,
-                                int top_or_bot, int cur_style)
+                                int flags, int cur_style)
 {
     pointer p, r, x, y;         /* temporary registers for box construction */
     scaled s;                   /* amount to skew the accent to the right */
@@ -2138,6 +2140,8 @@
     boolean s_is_absolute;      /* will be true if a top-accent is placed in |s| */
     extinfo *ext;
     pointer attr_p;
+    const int top_or_bot = flags & TOP_OR_BOT_MASK;
+    const int compat_mode = radical_rule(cur_style) == undefined_math_parameter;
     attr_p = (top_or_bot == TOP_CODE ? accent_chr(q) : bot_accent_chr(q));
     s_is_absolute = false;
     c = cur_c;
@@ -2146,29 +2150,40 @@
     s = 0;
     if (type(nucleus(q)) == math_char_node) {
         fetch(nucleus(q));
+        if (compat_mode) {
+          if (top_or_bot == TOP_CODE) {
+            s = get_kern(cur_f, cur_c, skew_char(cur_f));
+          } else {
+            s = 0;
+          }
+        } else {
         if (top_or_bot == TOP_CODE) {
             s = char_top_accent(cur_f, cur_c);
-            if (s != 0) {
+            if (s != INT_MIN) {
                 s_is_absolute = true;
-            } else {
-                s = get_kern(cur_f, cur_c, skew_char(cur_f));
             }
         } else {                /* new skewchar madness for bot accents */
             s = char_bot_accent(cur_f, cur_c);
-            if (s == 0) {       /* better than nothing: */
+            if (s == INT_MIN) {       /* better than nothing: */
                 s = char_top_accent(cur_f, cur_c);
             }
-            if (s != 0) {
+            if (s != INT_MIN) {
                 s_is_absolute = true;
             }
         }
+        }
     }
     x = clean_box(nucleus(q), cramped_style(cur_style), cur_style);
     w = width(x);
     h = height(x);
+    if (!compat_mode && !s_is_absolute) {
+      s = half(w);
+      s_is_absolute = true;
+    }
     /* Switch to a larger accent if available and appropriate */
     y = null;
-    while (1) {
+    if (flags & STRETCH_ACCENT_CODE) {
+      while (1) {
         ext = NULL;
         if ((char_tag(f, c) == ext_tag) &&
             ((ext = get_charinfo_hor_variants(char_info(f, c))) != NULL)) {
@@ -2187,6 +2202,7 @@
                 break;
             c = yy;
         }
+      }
     }
     if (y == null) {
         y = char_box(f, c, node_attr(attr_p));
@@ -2223,8 +2239,9 @@
             sa = char_top_accent(f, c);
         else
             sa = char_bot_accent(f, c);
-        if (sa == 0) {
+        if (sa == INT_MIN) {
             sa = half(width(y));        /* just take the center */
+            printf("No top accent position for accent %u\n", c);
         }
         shift_amount(y) = s - sa;
     } else {
@@ -2265,12 +2282,12 @@
     type(nucleus(q)) = sub_box_node;
 }
 
-static void make_math_accent(pointer q, int cur_style)
+static void make_math_accent(pointer q, int cur_style, int stretch)
 {
     if (accent_chr(q) != null) {
         fetch(accent_chr(q));
         if (char_exists(cur_f, cur_c)) {
-            do_make_math_accent(q, cur_f, cur_c, TOP_CODE, cur_style);
+          do_make_math_accent(q, cur_f, cur_c, TOP_CODE | (stretch ? STRETCH_ACCENT_CODE : 0), cur_style);
         }
         flush_node(accent_chr(q));
         accent_chr(q) = null;
@@ -2278,7 +2295,7 @@
     if (bot_accent_chr(q) != null) {
         fetch(bot_accent_chr(q));
         if (char_exists(cur_f, cur_c)) {
-            do_make_math_accent(q, cur_f, cur_c, BOT_CODE, cur_style);
+          do_make_math_accent(q, cur_f, cur_c, BOT_CODE | (stretch ? STRETCH_ACCENT_CODE : 0), cur_style);
         }
         flush_node(bot_accent_chr(q));
         bot_accent_chr(q) = null;
@@ -3417,7 +3434,7 @@
                 make_radical(q, cur_style);
             break;
         case accent_noad:
-            make_math_accent(q, cur_style);
+          make_math_accent(q, cur_style, subtype(q) == 0);
             break;
         case style_node:
             cur_style = subtype(q);
Index: source/texk/web2c/luatexdir/font/luafont.w
===================================================================
--- source/texk/web2c/luatexdir/font/luafont.w	(revision 3964)
+++ source/texk/web2c/luatexdir/font/luafont.w	(working copy)
@@ -1226,9 +1226,9 @@
             set_charinfo_tounicode(co, NULL);
 
         if (has_math) {
-            j = n_numeric_field(L, luaS_top_accent_index, 0);
+            j = n_numeric_field(L, luaS_top_accent_index, INT_MIN);
             set_charinfo_top_accent(co, j);
-            j = n_numeric_field(L, luaS_bot_accent_index, 0);
+            j = n_numeric_field(L, luaS_bot_accent_index, INT_MIN);
             set_charinfo_bot_accent(co, j);
             k = n_numeric_field(L, luaS_next_index, -1);
             if (k >= 0) {
